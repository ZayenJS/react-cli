#! /usr/bin/env node
"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const commander_1 = require("commander");
const App_1 = __importDefault(require("./App"));
const ConfigFile_1 = __importDefault(require("./ConfigFile"));
const Component_1 = __importDefault(require("./Component"));
const Hook_1 = __importDefault(require("./Hook"));
const Page_1 = __importDefault(require("./Page"));
const constants_1 = require("./constants");
commander_1.program.version('1.0.0-beta-0.1');
commander_1.program
    .command('config')
    .description(`Creates a config file for ${constants_1.PACKAGE_NAME}`)
    .option('-T, --type <type>', 'Specifies the framework used')
    .option('--import-react', 'This will influence the future component generation with the import React from "react" line')
    .option('-t, --typescript', `If true, the components generated by ${constants_1.PACKAGE_NAME} will use typescript`)
    .option('-s, --styling <type>', 'The styling to use for the components')
    .option('-m, --css-modules', 'Whether or not to use the module styling system for css/scss')
    .option('-c, --component-type <value>', 'Whether to use funcion or class components')
    .option('-d, --component-dir <directory_path>', 'The default location to generate components')
    .action(ConfigFile_1.default.generate);
const newCommand = commander_1.program.command('new');
newCommand
    .command('react-app [app-name]')
    .description('Uses create-react-app to create a new react app')
    .option('-i, --interactive', 'Starts the interactive mode')
    .option('-r, --router', 'Bootstraps a react app with built in react router')
    .option('-R, --redux', 'Bootstraps a react app with built in Redux')
    .option('-a, --axios', 'Bootstraps a react app with built in Axios')
    .option('--import-react', 'This will influence the future component generation with the import React from "react" line')
    .option('-t, --typescript', `If true, the components generated by '${constants_1.PACKAGE_NAME}' will use typescript`)
    .option('-s, --styling <type>', 'The styling to use for the components')
    .option('-m, --css-modules', 'Whether or not to use the module styling system for css/scss')
    .option('-c, --component-type <value>', 'Whether to use funcion or class components')
    .option('-d, --component-dir <directory_path>', 'The default location to generate components')
    .action(App_1.default.createReactApp);
newCommand
    .command('next-app  [app-name]')
    .description('Uses create-next-app to create a new next app')
    .option('-i, --interactive', 'Starts the interactive mode')
    .option('-r, --router', 'Bootstraps a react app with built in react router')
    .option('-R, --redux', 'Bootstraps a react app with built in Redux')
    .option('-a, --axios', 'Bootstraps a react app with built in Axios')
    .option('--import-react', 'This will influence the future component generation with the import React from "react" line')
    .option('-t, --typescript', `If true, the components generated by '${constants_1.PACKAGE_NAME}' will use typescript`)
    .option('-s, --styling <type>', 'The styling to use for the components')
    .option('-m, --css-modules', 'Whether or not to use the module styling system for css/scss')
    .option('-c, --component-type <value>', 'Whether to use funcion or class components')
    .option('-d, --component-dir <directory_path>', 'The default location to generate components')
    .action(App_1.default.createNextApp);
const generate = commander_1.program.command('generate').alias('g');
generate
    .command('component <component_name>')
    .alias('c')
    .description('Generates a component with a <component_name>')
    .option('-d, --component-dir <path>', 'Will generate the component in the specified path')
    .option('-t, --typescript', 'Generates a component with typescript')
    .option('-c, --component-type <type>', 'Generate a funcion or class component')
    .option('-s, --styling <type>', 'Generates a componente with a stylesheet associated with <type> = css | scss')
    .option('-m, --css-modules', 'Whether or not to use the module styling system for css/scss')
    .option('--import-react', 'This will influence the future component generation with the import React from "react" line')
    .option('--flat', 'This will not generate the component inside a folder')
    .option('-T, --tag <tag_name>', 'The HTML tag to use for the component')
    .action(Component_1.default.generate);
generate
    .command('hook <hook_name>')
    .alias('h')
    .description('Generates a custom hook with the <hook_name> in the default hooks folder')
    .option('-t, --typescript', 'Generates a hook using typescript')
    .option('-e, --use-effect', 'Adds a useEffect import to the generated file')
    .option('-s, --use-state', 'Adds a useState import to the generated file')
    .option('-S, --use-selector', 'Adds a useSelector import to the generated file')
    .option('-D, --use-dispatch', 'Adds a useDispatch import to the generated file')
    .action(Hook_1.default.generate);
generate
    .command('page <page_name>')
    .alias('p')
    .description('Generates a page with a <page_name>')
    .option('-t, --typescript', 'Generates a page with typescript', false)
    .action(Page_1.default.generate);
commander_1.program.parse(process.argv);
//# sourceMappingURL=index.js.map