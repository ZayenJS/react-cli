#! /usr/bin/env node
import { program } from 'commander';
import app, { App } from './App';
import configFile from './ConfigFile';
import component from './Component';
import { PACKAGE_NAME } from './constants';

program.version('1.0.0-beta-0.1');

program
  .command('config')
  .description('Creates a config file for ' + PACKAGE_NAME)
  .option('-T, --type <type>', 'Specifies the framework used', 'react')
  .option(
    '--import-react',
    'This will influence the future component generation with the import React from "react" line',
    false,
  )
  .option(
    '-t, --typescript',
    `If true, the components generated by ${PACKAGE_NAME} will use typescript`,
    false,
  )
  .option('-s, --styling <type>', 'The styling to use for the components', 'css')
  .option(
    '-m, --css-modules',
    'Whether or not to use the module styling system for css/scss',
    false,
  )
  .option('-c, --component-type <value>', 'Whether to use funcion or class components', 'function')
  .option(
    '-d, --component-dir <directory_path>',
    'The default location to generate components',
    'src/components',
  )
  .action(configFile.generate);

program
  .command('new-react-app  [app-name]')
  .description('Uses create-react-app to create a new react app')
  .option('-i, --interactive', 'Starts the interactive mode', false)
  .option('-t, --use-typescript', 'Uses typescript template to create react app', false)
  .option('-r, --use-router', 'Bootstraps a react app with built in react router', false)
  .option('-S, --use-sass', 'Bootstraps a react app with built in node-sass', false)
  .option('-m, --use-modules', 'Uses css/scss modules to create App component', false)
  .option('-R, --use-redux', 'Bootstraps a react app with built in Redux', false)
  .option('-a, --use-axios', 'Bootstraps a react app with built in Axios', false)
  .option('-N, --use-npm', 'Uses npm as a package manager', false)
  .action(app.createReactApp);

program
  .command('new-next-app  [app-name]')
  .description('Uses create-next-app to create a new next app')
  .option('-i, --interactive', 'Starts the interactive mode', false)
  .option('-t, --use-typescript', 'Uses typescript template to create react app', false)
  .option('-S, --use-sass', 'Bootstraps a react app with built in node-sass', false)
  .option('-m, --use-modules', 'Uses css/scss modules to create App component', false)
  .option('-R, --use-redux', 'Bootstraps a react app with built in Redux', false)
  .option('-a, --use-axios', 'Bootstraps a react app with built in Axios', false)
  .option('-N, --use-npm', 'Uses npm as a package manager', false)
  .action(app.createNextApp);

program
  .command('generate component <name> [dir]')
  .alias('g comp')
  .description('Generates a component with a <name> and an optionnal [dir]')
  .option('-t, --use-typescript', 'Generates a component with typescript', false)
  .option('-c, --class', 'Generates a class based component', false)
  .option(
    '-s, --with-styles <type>',
    'Generates a componente with a stylesheet associated with <type> = css | scss',
    false,
  )
  .option('-m, --use-modules', 'Wheter or not to use the so called css modules', false)
  .action(component.generate);

program.parse(process.argv);
